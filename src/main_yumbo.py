# This must be the first line
import pandas as pd
pd.options.mode.copy_on_write = True

import numpy as np
import os
import streamlit as st

import romz_ampl
import romz_excel
import sbar
import report_ampl
import report_experts
import report_stats
import report_summary
import report_tasks

def show_task():
    st.subheader(":green[Tasks]", divider="green")
    format = {'Start': "{:%Y-%m-%d}", 'End': "{:%Y-%m-%d}", 'Avg': "{:.4f}"}
    df = st.session_state.mprob["task"].style.format(format)
    st.dataframe(df, hide_index=True, use_container_width=True)


def show_expert():
    st.subheader(":green[Experts]", divider="green")
    st.dataframe(st.session_state.mprob["expert"], hide_index=True, use_container_width=True)


def show_assign():
    st.subheader(":green[Assignment]", divider="green")
    st.dataframe(st.session_state.mprob["assign"], hide_index=True, use_container_width=True)


def show_xbday():
    st.subheader(":green[xbday]", divider="green")
    format = {'Start': "{:%Y-%m-%d}", 'End': "{:%Y-%m-%d}", 'Lower': "{:.2f}", 'Upper': "{:.2f}"}
    df = st.session_state.mprob["xbday"].style.format(format)
    st.dataframe(df, hide_index=True, use_container_width=True)


def show_ubday():
    st.subheader(":green[ubday]", divider="green")
    format = {'Start': "{:%Y-%m-%d}", 'End': "{:%Y-%m-%d}", 'Lower': "{:.2f}", 'Upper': "{:.2f}"}
    df = st.session_state.mprob["ubday"].style.format(format)
    st.dataframe(df, hide_index=True, use_container_width=True)



def show_ebday():
    st.subheader(":green[ebday]", divider="green")
    format = {'Start': "{:%Y-%m-%d}", 'End': "{:%Y-%m-%d}", 'Lower': "{:.2f}", 'Upper': "{:.2f}"}
    df = st.session_state.mprob["ebday"].style.format(format)
    st.dataframe(df, hide_index=True, use_container_width=True)


def show_period():
    st.subheader(":green[Names and intervals]", divider="green")
    format = {'Start': "{:%Y-%m-%d}", 'End': "{:%Y-%m-%d}"}
    df = st.session_state.mprob["period"].style.format(format)
    st.dataframe(df, hide_index=True, use_container_width=True)


def show_pbsum():
    st.subheader(":green[pbsum]", divider="green")
    format = {'Start': "{:%Y-%m-%d}", 'End': "{:%Y-%m-%d}", 'Lower': "{:.2f}", 'Upper': "{:.2f}"}
    df = st.session_state.mprob["pbsum"].style.format(format)
    st.dataframe(df, hide_index=True, use_container_width=True)

def show_exptas():
    col0, col1, col2 = st.columns(3)
    with col0:
        show_task()
    with col1:
        show_expert()
    with col2:
        show_assign()


def customise_bounds():
    col0, col1, col2 = st.columns(3)
    with col0:
        show_xbday()
    with col1:
        show_ubday()
    with col2:
        show_ebday()


def customise_periods():
    col0, col1 = st.columns(2)
    with col0:
        show_period()
    with col1:
        show_pbsum()


def show_problem():
    if not st.session_state.glb["show_problem"]:
        return

    st.divider()

    st.header(":blue[Problem definition]", divider="blue")
    tab = st.tabs(["**Experts and Tasks**", "**Bounds**", "**Periods**"])

    with tab[0]:
        show_exptas()
    with tab[1]:
        customise_bounds()
    with tab[2]:
        customise_periods()


def show_main_panel():
    show_problem()

    report_summary.show()
    report_experts.show()
    report_tasks.show()
    report_stats.show()
    report_ampl.show()


def set_page_config():
    st.set_page_config(page_title="Yumbo",layout="wide")
    # css = '''
    # <style>
    #     [data-testid="stSidebar"]{
    #         min-width: 400px;
    #         max-width: 800px;
    #     }
    # </style>
    # '''
    # st.html(css)


def show_page_header():
    st.title(":red[Yumbo.] Scheduling, Planning and Resource Allocation")
    st.subheader("Zbigniew Romanowski, Pawe≈Ç Koczyk")
    st.markdown("Source code, documentation and sample Excel input files can be found on [Yumbo's](https://github.com/romz-pl/yambo) GitHub repository.")
    st.caption("_{d}_".format(d=pd.Timestamp.now().strftime("%d %B %Y, %H:%M:%S %p")))


def show_yumbo_description():
    st.divider()
    cols = st.columns(2)

    # The cols[1] and cols[2] are not used!
    with cols[0]:
        dd = os.path.dirname(__file__)
        with open(f"{dd}/../doc/yumbo.md", "r") as f:
            st.markdown(f'''{f.read()}''')

    st.divider()
    st.image(f"{dd}/../doc/yumbo.webp")
    st.caption("Image generated by ChatGPT")


def zero_time_counters():
    charts = ["imgb", "imgg", "imggsum", "imgh", "imghsum", "imgs", "imgt", "imgtsum", "imgw", "imge"]
    for v in charts:
        st.session_state.stats[f"{v}:cnt"] = 0
        st.session_state.stats[f"{v}:ttime"] = 0
        st.session_state.stats[f"{v}:nbytes"] = 0

    st.session_state.stats["ampl:ttime"] = 0
    st.session_state.stats["excel:ttime"] = 0
    st.session_state.stats["report_experts:ttime"] = 0
    st.session_state.stats["report_tasks:ttime"] = 0
    st.session_state.stats["report_summary:ttime"] = 0



def init_sesion():
    if 'glb' not in st.session_state:
        st.session_state.glb = dict()

    if 'mprob' not in st.session_state:
        st.session_state.mprob = dict()

    if 'stats' not in st.session_state:
        st.session_state.stats = dict()

    if 'amplsol' not in st.session_state:
        st.session_state.amplsol = pd.DataFrame()


def upload():
    with st.sidebar:
        uploaded_file = sbar.get_uploaded_file()
        if uploaded_file != None:
            romz_excel.load(uploaded_file)
            sbar.show()

    if uploaded_file == None:
        show_yumbo_description()
        return


def solve_problem():
    try:
        romz_ampl.solve()
    except Exception as e:
        st.subheader(f":red[Exception during solving process.] {e}")
        report_ampl.show_ampl_data_file()
        return


def main():
    init_sesion()
    set_page_config()
    show_page_header()
    zero_time_counters()
    upload()
    solve_problem()
    show_main_panel()


######################## CALL MAIN FUNCTION ##################

if __name__ == "__main__":
    main()

