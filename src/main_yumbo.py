# This must be the first line
import pandas as pd
pd.options.mode.copy_on_write = True

import matplotlib.figure as matplotlib_figure
import matplotlib.ticker as matplotlib_ticker
import numpy as np
import os
import streamlit as st
import time

import glb
import romz_ampl
import romz_excel
import sbar
import report_ampl
import report_experts
import report_problem
import report_stats
import report_summary
import report_tasks



def show_main_panel():
    report_problem.show()
    report_summary.show()
    report_experts.show()
    report_tasks.show()
    report_stats.show()
    report_ampl.show()


def set_page_config():
    st.set_page_config(page_title="Yumbo",layout="wide")
    # css = '''
    # <style>
    #     [data-testid="stSidebar"]{
    #         min-width: 400px;
    #         max-width: 800px;
    #     }
    # </style>
    # '''
    # st.html(css)


def show_page_header():
    st.title("ðŸ“… :red[Yumbo.] Scheduling, Planning and Resource Allocation")
    st.subheader("Zbigniew Romanowski, PaweÅ‚ Koczyk, Jacek Pikul")
    st.markdown("Source code, documentation and sample Excel input files can be found on [Yumbo's](https://github.com/romz-pl/yambo) GitHub repository.")
    st.markdown("Our LinkedIn personal pages: [Zbigniew](https://www.linkedin.com/in/romz-pl), [Jacek](https://www.linkedin.com/in/jacek-pikul-06b0201/)")
    st.caption(f"git hash: :green[{st.session_state.git_hash}]")
    st.caption(f"Timestamp: :green[{pd.Timestamp.now().strftime('%d %B %Y, %H:%M:%S %p')}]")
    st.caption(f"Streamlit version: :green[{st.__version__}]")


def show_yumbo_description():
    st.divider()
    cols = st.columns(2)

    # The cols[1] and cols[2] are not used!
    with cols[0]:
        dd = os.path.dirname(__file__)
        with open(f"{dd}/../doc/yumbo.md", "r") as f:
            st.markdown(f'''{f.read()}''')

    st.divider()
    st.image(f"{dd}/../doc/yumbo.webp")
    st.caption("Image generated by ChatGPT")


def init_sesion_stats():
    if 'stats' in st.session_state:
        return

    st.session_state.stats = dict()
    stats = st.session_state.stats

    charts = ["imgb", "imgg", "imggsum", "imgh", "imghsum", "imgs", "imgt", "imgtsum", "imgw", "imge", "H:Table", "S:Table"]
    for v in charts:
        stats[f"{v}:cnt"] = 0
        stats[f"{v}:ttime"] = 0
        stats[f"{v}:nbytes"] = 0

    stats["ampl:ttime"] = 0
    stats["excel:ttime"] = 0
    stats["report_experts:ttime"] = 0
    stats["report_tasks:ttime"] = 0
    stats["report_summary:ttime"] = 0


def init_show_tasks():
    # Extract tasks names and define row/column counts
    tasks = st.session_state.mprob["task"]["Name"].to_numpy()

    # Create a DataFrame with predefined columns and default boolean values
    names = ["Chart", "H:Table", "S:Table"]
    df = pd.DataFrame(False, index=tasks, columns=names)
    df.index.name = "Task"

    # Sort the DataFrame by index (task names)
    df.sort_index(inplace=True)
    return df


def init_show_experts():
    # Extract expert names and define row/column counts
    experts = st.session_state.mprob["expert"]["Name"].to_numpy()

    # Create a DataFrame with predefined columns and default boolean values
    names = ["Chart", "H:Table", "S:Table", "xbday"]
    df = pd.DataFrame(False, index=experts, columns=names)
    df.index.name = "Expert"

    # Sort the DataFrame by index (expert names)
    df.sort_index(inplace=True)
    return df


def init_sesion_variables():
    if 'schedule' not in st.session_state:
        st.session_state.schedule = pd.DataFrame()

    if 'overflow' not in st.session_state:
        st.session_state.overflow = pd.Series()

    if 'mprob' not in st.session_state:
        st.session_state.mprob = dict()

    if 'git_hash' not in st.session_state:
        st.session_state.git_hash = 0

    if 'show' not in st.session_state:
        st.session_state.show = dict()

    init_sesion_stats()


def upload():
    with st.sidebar:
        uploaded_file = sbar.get_uploaded_file()
        if uploaded_file != None:
            romz_excel.load(uploaded_file)
            st.session_state.mprob["uploaded_file_name"] = uploaded_file.name
            st.session_state.show["tasks_init"] = init_show_tasks()
            st.session_state.show["experts_init"] = init_show_experts()
            sbar.show()

    return uploaded_file != None


def main():
    try:
        time_start = time.perf_counter()

        st.session_state.git_hash = glb.calc_git_hash()
        set_page_config()
        show_page_header()
        init_sesion_variables()

        if not upload():
            show_yumbo_description()
            return

        romz_ampl.solve()
        show_main_panel()

        time_end = time.perf_counter()
        st.markdown(f":material/timer: **Total elapsed time of this run: :green[{(time_end-time_start):.3f} [s]]**")
    except Exception as e:
        st.subheader(f":red[Exception during solving process.] {e}")



######################## CALL MAIN FUNCTION ##################

if __name__ == "__main__":
    main()

